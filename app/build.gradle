plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'

    // Kotlinx-Serialization
    id 'org.jetbrains.kotlin.plugin.serialization'

    // KSP (Kotlin-first alternative to kapt, needed for Compose Navigation for example)
    // https://developer.android.com/build/migrate-to-ksp#groovy
    id 'com.google.devtools.ksp'

    // Dagger - Hilt
    // https://stackoverflow.com/questions/70550883/warning-the-following-options-were-not-recognized-by-any-processor-dagger-f
    id 'dagger.hilt.android.plugin'
    id 'kotlin-kapt'

    // Apollo-GraphQl - https://github.com/apollographql/apollo-kotlin
    id 'com.apollographql.apollo3' version '4.0.0-alpha.1'

    // MongoDB Realm - https://www.mongodb.com/docs/realm/sdk/kotlin/install/#std-label-kotlin-install-android
    id 'io.realm.kotlin'

    // Parcelize - https://developer.android.com/kotlin/parcelize
    // Currently needed because @Serializable isn't accepted when writing to SavedStateHandle (BUG?)
    id 'kotlin-parcelize'
}

android {
    namespace 'com.thenamlit.emotesonmymind'
    compileSdk 33

    //the compression of webp file during build causes problem with FileDescriptor in ContentProvider.
    aaptOptions {
        noCompress "webp"
    }

    defaultConfig {
        applicationId "com.thenamlit.emotesonmymind"
        minSdk 29
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        buildFeatures {
            buildConfig = true
        }

        // For StickerContentProvider
        def contentProviderAuthority = applicationId + ".stickercontentprovider"
        // Creates a placeholder property to use in the manifest.
        manifestPlaceholders = [contentProviderAuthority: contentProviderAuthority]
        // Adds a new field for the authority to the BuildConfig class.
        buildConfigField("String", "CONTENT_PROVIDER_AUTHORITY", "\"${contentProviderAuthority}\"")
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.4.6'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.10.1'
    implementation platform('org.jetbrains.kotlin:kotlin-bom:1.8.0')
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.1'
    implementation 'androidx.activity:activity-compose:1.7.2'
    implementation platform('androidx.compose:compose-bom:2023.05.01')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.core:core-ktx:1.10.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation platform('androidx.compose:compose-bom:2023.05.01')
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'


    // Compose
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:2.6.1"
    implementation "androidx.navigation:navigation-compose:2.6.0"
    implementation "androidx.compose.runtime:runtime-livedata:1.4.3"


    // Lifecycle - https://stackoverflow.com/a/61417891
    def lifecycle_version = "2.2.0"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"


    // Extended Material Compose Items
    // https://developer.android.com/jetpack/compose/resources#icons
    implementation 'androidx.compose.material:material-icons-extended'


    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4'


    // Coroutine Lifecycle Scopes
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.1"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.6.1"


    // Room Database - https://developer.android.com/jetpack/androidx/releases/room
    // Using MongoDB Realm instead
//    def room_version = "2.5.2"
//    implementation "androidx.room:room-runtime:$room_version"
//    annotationProcessor "androidx.room:room-compiler:$room_version"
//    ksp "androidx.room:room-compiler:$room_version"
//    implementation "androidx.room:room-paging:$room_version"    // Optional
//    implementation "androidx.room:room-ktx:$room_version"


    // Dagger Hilt - https://developer.android.com/training/dependency-injection/hilt-android#groovy
    implementation "com.google.dagger:hilt-android:2.44.2"
    kapt "com.google.dagger:hilt-compiler:2.44.2"
    implementation "androidx.hilt:hilt-navigation-compose:1.1.0-alpha01"
    // Dagger Hilt Worker
    implementation 'androidx.hilt:hilt-work:1.0.0'
    kapt 'androidx.hilt:hilt-compiler:1.0.0'


    // Serialization
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.1"


    // Ktor-Client
    def ktor_version = "2.3.0"
    implementation "io.ktor:ktor-client-core:$ktor_version"
    implementation "io.ktor:ktor-client-android:$ktor_version"
    implementation "io.ktor:ktor-client-serialization:$ktor_version"
    implementation "io.ktor:ktor-client-logging:$ktor_version"
    implementation "io.ktor:ktor-client-content-negotiation:$ktor_version"
    implementation "io.ktor:ktor-serialization-kotlinx-json:$ktor_version"


    // Coil (Image Loading) - https://coil-kt.github.io/coil/ | https://coil-kt.github.io/coil/gifs/
    implementation("io.coil-kt:coil-compose:2.3.0")
    implementation("io.coil-kt:coil-gif:2.3.0") // For animated WebP-Support


    // Compose Destination - https://github.com/raamcosta/compose-destinations#setup
    implementation 'io.github.raamcosta.compose-destinations:core:1.8.41-beta'
    ksp 'io.github.raamcosta.compose-destinations:ksp:1.8.41-beta'


    // Apollo-GraphQl - https://github.com/apollographql/apollo-kotlin
    implementation 'com.apollographql.apollo3:apollo-runtime:4.0.0-alpha.1'


    // MongoDB Realm - https://www.mongodb.com/docs/realm/sdk/kotlin/install/#std-label-kotlin-install-android
    // https://www.mongodb.com/community/forums/t/using-in-in-kotlin-sdk-queries/235854
    implementation 'io.realm.kotlin:library-base:1.10.0'


    // WorkManager - https://developer.android.com/jetpack/androidx/releases/work
    def work_version = "2.8.1"
    implementation "androidx.work:work-runtime:$work_version"
    implementation "androidx.work:work-runtime-ktx:$work_version"


    // Glide - https://bumptech.github.io/glide/doc/download-setup.html
    def GLIDE_VERSION = "4.15.1"
    // WebpDecoder
    implementation "com.github.zjupure:webpdecoder:2.3.${GLIDE_VERSION}"
    // Glide 4.10.0+
    implementation "com.github.bumptech.glide:glide:${GLIDE_VERSION}"
    annotationProcessor "com.github.bumptech.glide:compiler:${GLIDE_VERSION}"
}

// Dagger Hilt
// Allow references to generated code
kapt {
    correctErrorTypes true
}

// Apollo-GraphQl - https://github.com/apollographql/apollo-kotlin
apollo {
    service("service") {
        packageName.set("com.thenamlit.emotesonmymind")
    }
}


task checkDebug {
    doLast {
        println("checkDebug")
        if (android.defaultConfig.applicationId.startsWith("com.whatsapp")) {
            throw new GradleException("applicationId in defaultConfig cannot start with com.whatsapp, please change your applicationId in app/build.gradle")
        }
        checkApplicationIdInDebug()
    }
}

private void checkApplicationIdInDebug() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ignoreApplicationIdCheck = properties.getProperty('ignoreApplicationIdCheck')
    if (ignoreApplicationIdCheck == null) {
        if (android.defaultConfig.applicationId == "com.example.samplestickerapp") {
            throw new GradleException("Your applicationId is currently com.example.samplestickerapp, please change your applicationId to a different string in app/build.gradle in line 10")
        }
    } else {
        println("application id check ignored")
    }
}


task checkRelease {
    doLast {
        println("checkRelease")
        if (android.defaultConfig.applicationId.startsWith("com.example")) {
            throw new GradleException("applicationId in defaultConfig cannot start with com.example, please change your applicationId in app/build.gradle")
        }
    }
}

tasks.whenTaskAdded { task ->
    println(task.name)
    if (task.name.contains("assembleDebug")) {
        task.dependsOn checkDebug
    }
    if (task.name.contains("assembleRelease")) {
        task.dependsOn checkRelease
    }
}
